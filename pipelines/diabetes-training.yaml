apiVersion: mlpie.ai/v1
kind: Pipeline
metadata:
  name: "diabetes-training"
  description: "End-to-end pipeline for training diabetes prediction model"
  version: "v1.0.0"
  labels:
    - "ml"
    - "diabetes"
    - "training"
spec:
  engine: "dagster"
  projectRef:
    name: "sample-ml-project"  # Name of the project to associate with
  code: |
    from mlpie import pipeline, component

    @component
    def load_data():
        # Load the diabetes dataset
        import pandas as pd
        from sklearn.datasets import load_diabetes
        
        diabetes = load_diabetes()
        df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
        df['target'] = diabetes.target
        
        return df

    @component
    def preprocess_data(data):
        # Preprocess the data
        from sklearn.preprocessing import StandardScaler
        from sklearn.model_selection import train_test_split
        
        X = data.drop('target', axis=1)
        y = data['target']
        
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)
        
        return {
            'X_train': X_train_scaled,
            'X_test': X_test_scaled,
            'y_train': y_train,
            'y_test': y_test,
            'scaler': scaler
        }

    @component
    def train_model(preprocessed_data):
        # Train a model
        from sklearn.linear_model import Ridge
        
        X_train = preprocessed_data['X_train']
        y_train = preprocessed_data['y_train']
        
        model = Ridge(alpha=0.1)
        model.fit(X_train, y_train)
        
        return model

    @component
    def evaluate_model(model, preprocessed_data):
        # Evaluate the model
        from sklearn.metrics import mean_squared_error, r2_score
        import numpy as np
        
        X_test = preprocessed_data['X_test']
        y_test = preprocessed_data['y_test']
        
        y_pred = model.predict(X_test)
        
        mse = mean_squared_error(y_test, y_pred)
        rmse = np.sqrt(mse)
        r2 = r2_score(y_test, y_pred)
        
        return {
            'mse': mse,
            'rmse': rmse,
            'r2': r2
        }

    @pipeline(name="diabetes-training")
    def diabetes_training_pipeline():
        data = load_data()
        preprocessed_data = preprocess_data(data)
        model = train_model(preprocessed_data)
        metrics = evaluate_model(model, preprocessed_data)
        return {
            'model': model,
            'metrics': metrics
        } 
